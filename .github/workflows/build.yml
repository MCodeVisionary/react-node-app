name: 'reactApp'
on:
  push:
    branches:
      - main
  pull_request:
    types: 
      - closed
    branches:
      - main
  workflow_dispatch:

jobs:
 npm-build-and-publish:
   runs-on: ubuntu-latest
   env:
     BUILD_NAME: 'reactApp'
     JFROG_BUILD_STATUS: PASS
   steps:
     - name: Checkout
       uses: actions/checkout@v3
     - name: JFrog CLI setup üê∏
       uses: jfrog/setup-jfrog-cli@v4
       env:
        JF_URL: ${{ secrets.JF_URL }}
        JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
        JF_USER: ${{secrets.JF_USER}}
        JF_ACCESS_TOKEN: ${{secrets.JF_ACCESS_TOKEN}}
        DOCKER_JF_RT_REPO: "alpha-docker-virtual"
     - name: Health check JFrog Artifactory instance üê∏
       run: |
        jf --version
        jf rt ping
        jf config show
     - name: Build and publish
       run: |
         # Configure the project
         jf npmc --repo-resolve alpha-npm-virtual --repo-deploy alpha-npm-virtual
         # Build the project using JFrog CLI
         jf npm install --build-name ${{env.BUILD_NAME}} --build-number ${{github.run_number}}
         jf npm publish --build-name ${{env.BUILD_NAME}} --build-number ${{github.run_number}}
     - name: Failure check
       run: |
         echo "JFROG_BUILD_STATUS=FAIL" >> $GITHUB_ENV
       if: failure()
     - name: Login to JFrog Docker repo
       uses: docker/login-action@v3
       with:
          registry: ${{ secrets.JF_URL }}
          username: ${{ secrets.JF_USER }}
          password: ${{ secrets.JF_PASSWORD }}
     - name: Docker Build üê≥üê∏
       run: |
         jfrog docker image build --tag ${{ env.JF_URL }}/${{ env.DOCKER_JF_RT_REPO }}/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }} --secret id=npmrc,src=$HOME/.npmrc  --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_NUMBER}} --module docker-build --build-arg="REGISTRY_URL=${{ env.JF_URL }}" --build-arg="DOCKER_REPO_NAME=$DOCKER_JF_RT_REPO"  .
       env:
         JF_URL: ${{ secrets.JF_URL }}
     - name: JFrog docker image scan üê≥üê∏
       run: |
         jfrog docker scan ${{ env.JF_URL }}/${{ env.DOCKER_JF_RT_REPO }}/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }}
       env:
         JF_URL: ${{ secrets.JF_URL }}
     - name: Docker Push üê≥üê∏
       run: |
          jfrog docker push ${{ env.JF_URL }}/$DOCKER_JF_RT_REPO/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }} --build-name $JFROG_CLI_BUILD_NAME --build-number $JFROG_CLI_BUILD_NUMBER --module docker-build --project $JF_RT_PROJECT_NAME
       env:
          JF_URL: ${{ secrets.JF_URL }}
     - name: Publish build NPM build-info
       run: |
         # Collect and store environment variables in the build-info
         jf rt bce ${{env.BUILD_NAME}} ${{github.run_number}}
         # Collect and store VCS details in the build-info
         jf rt bag ${{env.BUILD_NAME}} ${{github.run_number}}
         # Publish the build-info to Artifactory
         jf rt bp ${{env.BUILD_NAME}} ${{github.run_number}}
         # Scan the published build-info with Xray
         # jf rt bs
       if: always()
     
